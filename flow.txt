1.go to the folder
2.create a virtual environment -- python -m pip install virtualenv  -- python -m venv venv
3.Activate the environment -- venv/scripts/activate -- this is for anytime I wanna use the backend
4. Now intsalling some packages -- inside the environment now.
-- django -- python -m pip install Django

5.After the installation. starting the project. -- django-admin startproject crud . -- the dot ensures there are no nested folders
6.inside the project now I include other apps. in this case APIS app --  python manage.py startapp api
7.register the api app to the base app that is the crud -- go to settings in the crud and edit installed apps -- add the 'api'
8. ensure all files used in crud are present in api i.e the URL FILE. copy the code but exclude the path, let the object be empty.
9. inside the main URLS import include and add the path to the api key
//
10. now set up the database
-- python manage.py makemigrations
-- python manage.py migrate
//
11.lets see if it all up and runnig
-- python manage.py runserver

//
//
1.creating the first react setup using vite
-- npm create vite@latest
2.give the name of the project -- in this case its frontend
3. now select react and after that the Javascript + swc -- speed web compiler
-- a frontend folder has been created 
4. continue following the steps in intsalling  -- cd frontend -- npm install 
-- start the server by -- npm run dev -- now its up and running
//
//
//
NOW CONNECTING THE 2 -- BACKEND AND frontend
1.for this I use the cors headers -- -- python -m pip install django-cors-headers
2.cd into the backend folder, that is in the terminal -- activate the venv
3. go to settings in main app and add the corsheaders,after the static files then  after which run the install.
4.-- go to the middleware again in settings
-- now include this 'corsheaders.middleware.CorsMiddleware', right above the 'Common Middleware'

--
1. now, which domains are allowed. for that I use the CORS_ALLOWED_ORIGINS
--right underneath the MIDDLEWARE. add the  CORS_ALLOWED_ORIGINS[] inside there add the urls to be accesed. i.e in this case its the vite+react page Url.


-- page navigation
1.installing react router -- help me with the navigation to different pages
-- use it as a library -- refer to the documentation
--1st vite+react is already installed.  so all I install is npm i react-router --  inside the frontend folder

2.-- to edit as per the documentation -- go to src - main.jsx
-- add the import of {BrowserRouter} from  "raect-router"
-- add a new html block of <BrowserRouter> and inside add tha app

pages
--
--create a components folder inside the src folder -- its where I am going to put my pages i.e the home page,delete,edit,create and edit
-- go now to the app.jsx and remove the contents and imports of the images. in readiness for project

app,jsx
--creat routes and in them create a route ... remember to import the page from the components folder

Creating NAVBAR
1.Installing packages for material UI. -- go to the page --npm install @mui/material @emotion/react @emotion/styled
-- Icons -- npm install @mui/icons-material
DONE 

create a folder navbar inside components for the navbar
-- create a file named navbar.jsx and copy the code from material Ui -- clipped under the app bar is what I am using. change the name to navbar
-- link this to the app.jsx and place the nav before the pages
--remove the topograpy -- replace it with {content} -- also, add content to the navbar as a parameter.

removed all CSS code in app.css and for the index  only the root code remains
removed the list nad the box, to give room to my own design

-- under navbar - another file called menu.jsx the input our list -- in this case use material  ui and get nested list.

replaced the navigationlists with <Menu> as imported

now editiing the NAVbar -- remove the draft and email list. change the names and noe getting an icon from material UI ;